all: world

CONFIG ?= radio
CF := ${CONFIG}.json
BUILD_DIR := build/${CONFIG}
OBJ_DIR := ${BUILD_DIR}/obj
bin := ${BUILD_DIR}/firmware.bin

# Throw an error if the .json configuration file doesn't exist...
ifeq (x$(wildcard ${CF}),x)
$(error ***ERROR*** Please create ${CF} first before building -- There is an example at doc/radio.json.example you can use)
endif

CFLAGS := -std=gnu11 -g -O2 -Wall -Wno-unused -pedantic
LDFLAGS := -lc -lm
CFLAGS += -I${BUILD_DIR} $(strip $(shell cat ${CF} | jq -r ".build.cflags"))
LDFLAGS += $(strip $(shell cat ${CF} | jq -r ".build.ldflags"))
TC_PREFIX := $(strip $(shell cat ${CF} | jq -r ".build.toolchain.prefix"))
EEPROM_SIZE := $(strip $(shell cat ${CF} | jq -r ".eeprom.size"))
EEPROM_FILE := ${BUILD_DIR}/eeprom.bin
PLATFORM := $(strip $(shell cat ${CF} | jq -r ".build.platform"))

# Are we cross compiling?
ifneq (${TC_PREFIX},"")
CC := ${TC_PREFIX}-gcc
LD := ${TC_PREFIX}-ld
else
CC := gcc
LD := ld
endif

##################
# Source objects #
##################
objs += cat_control.o		# CAT parsers
objs += cat_kpa500.o		# amplifier control (KPA-500 mode)
objs += crc32.o
objs += eeprom.o		# "EEPROM" configuration storage
objs += faults.o		# Fault management/alerting
objs += gpio.o			# GPIO controls
objs += i2c.o			# i2c abstraction
objs += logger.o		# Logging facilities
objs += main.o			# main loop
ifeq (${PLATFORM}, posix)
objs += posix.o			# support for POSIX hosts (pi or debugging)
endif
objs += power.o			# Power monitoring and management
objs += thermal.o		# Thermal management
objs += usb.o			# Support for USB control (stm32)

# translate unprefixed object file names to source file names
src_files = $(objs:.o=.c)

# prepend objdir path to each object
real_objs := $(foreach x, ${objs}, ${OBJ_DIR}/${x})

################################################################################
###############
# Build Rules #
###############
# Remove log files, etc
extra_clean += firmware.log
# Remove autogenerated headers on clean
extra_clean += $(wildcard ${BUILD_DIR}/*.h)
extra_build += ${EEPROM_FILE}

world: ${extra_build} ${bin}

${bin}: ${real_objs}
	@${CC} -o $@ ${real_objs} ${LDFLAGS} 
	@echo "[Link] $@ from $(words ${real_objs}) object files..."

# Rebuild the EEPROM and headers, if any configuration or templates are changed
${BUILD_DIR}/build_config.h ${BUILD_DIR}/eeprom_layout.h ${EEPROM_FILE}: ${CF} $(wildcard res/*.json) buildconf.pl .version GNUmakefile
	@echo "[buildconf]"
	@./buildconf.pl ${CONFIG}

${OBJ_DIR}/%.o:%.c ${BUILD_DIR}/build_config.h ${BUILD_DIR}/eeprom_layout.h $(wildcard *.h) $(wildcard ${BUILD_DIR}/*.h)
	@${CC} ${CFLAGS} -o $@ -c $<
	@echo "[Compile] $@ from $<"

##################
# Source Cleanup #
##################
clean:
	@echo "[clean]"
	@${RM} ${bin} ${real_objs} ${extra_clean}

distclean: clean
	@echo "[distclean]"
	@${RM} ${EEPROM_FILE}
	@${RM} -r build

###############
# DFU Install #
###############
install:
	@echo "Automatic DFU installation isn't supported yet... Please see doc/INSTALLING.txt for more info"

###################
# Running on host #
###################
ifeq (${PLATFORM},posix)
# Run debugger
run: ${bin}
	@echo "[run] ${bin}"
	@${bin}

gdb: ${bin} ${EEPROM_FILE}
	@echo "[gdb] ${bin}"
	@gdb ${bin} -ex 'run'

test: clean world gdb
endif

#################
# Configuration #
#################
res/bandplan.json:
	touch $@

res/eeprom_layout.json:
	exit 1

res/eeprom_types.json:
	exit 1

# Display an error message and halt the build, if no configuration file
radio.json:
	@echo "********************************************************"
	@echo "* PLEASE read README.txt and edit ${CF} as needed *"
	@echo "********************************************************"
	exit 1
